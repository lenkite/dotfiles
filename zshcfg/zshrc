#supercrabtree vim: set sw=2 ts=2 sts=2 et tw=80 foldlevel=0 foldmethod=marker spell:
# See ZSH startup files at http://zsh.sourceforge.net/Intro/intro_3.html
# zshrc is sourced in interactive shells
# It should be used to setup aliases, functions, options
# key-bindings, etc
#

[[ -z $dotfiles ]] && echo "ERROR: dotfiles variable not set! Check zshenv"


main() {
  hacks
  zsh_opts_vars
  zsh_plugins
  onthefly_setup #Keep this lightweight and move to setup.sh when big
  os_specific_aliases
  git_config
  neovim_config
  java_config
  python_config
  misc_alias
  def_autoloads
  exec_autoruns
  exec_compinit
  vi_mode  #Keep towards  end cos plugins have bad habit of changing this
  get_cheats
  cloud_sdk
  prompt_setup
  source_my_zshrc
  post_hacks
  cd ~
}

hacks() {
  # See https://github.com/rupa/z/pull/200
  [[ $isWsl ]] && { echo "Running in WSL. unset BG_NICE"; unsetopt BG_NICE }

  # Fix https://github.com/ohmyzsh/ohmyzsh/issues/11416
}

zsh_opts_vars() {
  #  Increase history size
  ## See http://zsh.sourceforge.net/Guide/zshguide02.html#l16
  if [ -z "$HISTFILE" ]; then
    HISTFILE=$HOME/.zhistory
  fi
  export HISTFILESIZE=10000000
  export SAVEHIST=1000000
  export HISTSIZE=1000000
  setopt HIST_ALLOW_CLOBBER  EXTENDED_HISTORY INC_APPEND_HISTORY
  setopt HIST_IGNORE_DUPS HIST_REDUCE_BLANKS HIST_IGNORE_SPACE HIST_VERIFY 
  setopt AUTOCD
  setopt CD_ABLE_VARS
  setopt PROMPT_SUBST
  setopt PUSHD_IGNORE_DUPS AUTOPUSHD
  setopt CORRECT
  setopt EXTENDED_GLOB
  setopt HASH_ALL
  setopt INTERACTIVECOMMENTS

  # Add my zfuncs to fpath
  # See 9.1 Autoloading Functions at http://zsh.sourceforge.net/Doc/Release/Functions.html
  [[ -d ~/.zfuncs ]] || mkdir ~/.zfuncs # for completions installed by tools
  fpath=(~/.zfuncs $dotfiles/zshcfg/zfuncs $fpath)

  zstyle ':completion:*' list-prompt '%S%M matches%s' #from prezto
  zstyle ':completion:*' menu select



}

zsh_plugins() {

  ## Trying antigen as plugin manager
  # if [[ -f ~/.antigen/antigen.zsh ]]; then
  #   source ~/.antigen/antigen.zsh
  #   antigen bundle miekg/lean
  #   antigen apply
  # else
  #   echo "ERR: antigen not found. Run 'setup.sh -z'"
  # fi

  ## Currently using zgen as plugin manager
  [ -f ~/.zgen/zgen.zsh ] && source ~/.zgen/zgen.zsh || echo "ERR: zgen not found. Re-run '~/dotfiles/setup/setup.sh -z'"
  if [[ -f ~/.zgen/zgen.zsh ]]; then
    zgen load zsh-users/zsh-syntax-highlighting
    zgen oh-my-zsh
    zgen oh-my-zsh plugins/git
    zgen oh-my-zsh plugins/vi-mode
    zgen oh-my-zsh themes/arrow
    zgen oh-my-zsh plugins/kubectl
    ZSH_HIGHLIGHT_STYLES[comment]='none' #https://github.com/zsh-users/zsh-syntax-highlighting/issues/510
  fi
}

onthefly_setup() {
  [[ -d ~/bin ]] || mkdir ~/bin
} 

os_specific_aliases() {
  if [[ "$isMacos" == true ]]; then
    # TODO: define chrome, etc aliases for other oses too!
    alias start=open
    alias chrome="/Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome"
    alias chromecanary="/Applications/Google\ Chrome\ Canary.app/Contents/MacOS/Google\ Chrome\ Canary"
    alias chromium="/Applications/Chromium.app/Contents/MacOS/Chromium"
    alias hdlchr="chrome --headless --disable-gpu --crash-dumps-dir=/tmp"
  fi
  if [[ "$isWsl" == true ]]; then
    start() {
      local targ_path=$(wslpath -wa $1)
      echo "targetpath is $targ_path"
      (cd /mnt/c && /mnt/c/Windows/explorer.exe $targ_path)
    }
    compdef start=ls
  fi
  if [[ $isCygwin ]]; then
    gvim() {
      gvimExe="/c/PROGRA~2/Vim/vim80/gvim.exe"
      $(unset TERM && $gvimExe $*)
    }
  fi
}

def_autoloads() {

  # https://deno.land/manual/getting_started/setup_your_environment

  # Autoloads 
  # See https://unix.stackexchange.com/questions/33255/how-to-define-and-load-your-own-shell-function-in-zsh
  autoload -Uz compinit && compinit #Used for compdef function. 
  autoload -U promptinit && promptinit
  autoload -U colors && colors
  # See http://www.refining-linux.org/archives/36/ZSH-Gem-1-Programmable-file-renaming/
  autoload -U zmv
  alias mmv='noglob zmv -W' #http://www.mfasold.net/blog/2008/11/moving-or-renaming-multiple-files/
  # Load the  _curl completion function defined in zshcfg/zfuns. Was generated by curl/scripts/zsh.pl
  autoload -Uz _curl
  autoload -Uz _kubectl
  autoload -Uz _deno
  autoload -Uz _kubebuilder
  autoload -Uz _gardenctl

  # VCS info for git propmt
  autoload -Uz vcs_info
}


git_config() {
  git_dirs_pull() {
    local branch=$1
    if [[ ! -z $branch ]]; then
      echo "Will git pull sub-directories for branch $branch" 
    # else
      echo "Will git pull sub-directories at current branch"
    fi
    for d in */ ; do
      if [ -d "$d/.git" ]; then
        echo "Git pulling $d ..."
        git -C $d pull
        if [[ ! -z $branch ]]; then
          echo "Changing branch to $branch"
          git -C $d checkout $branch
          git pull
        fi
      fi
      echo "$d"
    done
  }
  alias git-dirs-pull=git_dirs_pull
  if [[ $hasGit ]]; then
    # TODO: Agent setup is yet to be done correctly!
    git config --global credential.helper "cache --timeout=3600"  
  fi
}


neovim_config() {
  #https://github.com/mhinz/neovim-remote
  hasNvr=$(command -v nvr)
  hasNeovim=$(command -v nvim)
  if [[ $hasNvr ]]; then
    # alias vim=nvr
    # alias nvim=nvr
    alias vim=nvim
  elif [[ $hasNeovim ]]; then
    alias vim=nvim
  fi
  alias lv='nvim -u NONE'
}



install_jdk17() {
  local jdkUrl=https://download.java.net/java/GA/jdk17.0.2/dfd4a8d0985749f896bed50d7138ee7f/8/GPL/openjdk-17.0.2_macos-x64_bin.tar.gz
  local jdkDir=~/sdk/jdk-17.0.2.jdk
  local cacheLoc=/tmp/jdk17.tar.gz
  echo "jdkDir: $jdkDir"
  if [[ -d $jdkDir ]]; then 
    echo "Skipping since JDK Dir: $jdkDir exists"
    return 1
  else
    curl -C - -kL -o $cacheLoc $jdkUrl
    echo "JDK 17 Downloaded at $cacheLoc"
    tar -C ~/sdk -xzf $cacheLoc
    echo "Check JDK install @ $jdkDir"
  fi
}

java_config() {
  if [[ $isMacos ]]; then
    javahome8() {
      if [[ -f /usr/libexec/java_home ]]; then
        local jh=$(/usr/libexec/java_home -v 1.8)
        echo "Setting JAVA_HOME to $jh"
        export JAVA_HOME=$jh
      fi
    }
  fi
}

python_config() {
  [[ -f /usr/local/bin/virtualenvwrapper.sh ]] && source /usr/local/bin/virtualenvwrapper.sh
  [[ -f ~/.local/bin/virtualenvwrapper.sh ]] && source ~/.local/bin/virtualenvwrapper.sh
}

exec_autoruns() {
  if [[ -d $dotfiles ]] ; then
    for file in $dotfiles/zshcfg/autorun/*.{sh,zsh}; do
      if [[ -f $file ]] ; then
        source "$file"
      fi
    done
  fi
}

exec_compinit() {
  [ $isCygwin ] && echo "Loading autoruns/completions. This can take time on Cygwin..."
  # https://stackoverflow.com/questions/14677936/source-multiple-files-in-zshrc-with-wildcard
  #
  # TODO: the below doesn't appear to work on Cygwin. Fix ME.
  # See http://zsh.sourceforge.net/Doc/Release/Completion-System.html#Initialization
  # See https://gist.github.com/ctechols/ca1035271ad134841284
  # On slow systems, checking the cached .zcompdump file to see if it must be 
  # regenerated adds a noticable delay to zsh startup.  This little hack restricts 
  # it to once a day.  It should be pasted into your own completion file.
  #
  # The globbing is a little complicated here:
  # - '#q' is an explicit glob qualifier that makes globbing work within zsh's [[ ]] construct.
  # - 'N' makes the glob pattern evaluate to nothing when it doesn't match (rather than throw a globbing error)
  # - '.' matches "regular files"
  # - 'mh+24' matches files (or directories or whatever) that are older than 24 hours.
  autoload -Uz compinit 
  if [[ -n ~/.zcompdump(#qN.mh+24) ]]; then
    compinit -u;
  else
    compinit -C;
  fi;
}

vi_mode() {
  # http://dougblack.io/words/zsh-vi-mode.html
  set -o vi
  bindkey -v
  # http://dougblack.io/words/zsh-vi-mode.html
  export KEYTIMEOUT=1 # very important for lag killing.

  # The behaviour of / and ? in command line is screwed up by both prezto and
  # oh-my-zsh's zsh vi-mode plugin. I want to remove the incremental search
  # keybindings 
  # See
  # http://unix.stackexchange.com/questions/285208/how-to-remove-a-zsh-keybinding-if-i-dont-know-what-it-does
  # See man zshzle for these functions
  bindkey -M vicmd "?" vi-history-search-forward
  bindkey -M vicmd "/" vi-history-search-backward
  export LC_ALL=en_US.UTF-8
}


get_cheats() {
  if [[ ! -f ~/bin/cht.sh ]]; then
    curl https://cht.sh/:cht.sh > ~/bin/cht.sh
    chmod +x ~/bin/cht.sh
  fi
}


cloud_sdk() {
  if [[ -e "/opt/homebrew/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/path.zsh.inc" ]]; then
    source "/opt/homebrew/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/path.zsh.inc"
  fi
  eval $(gardenctl kubectl-env zsh)
}

prompt_setup() {
  kube_ps1_dir=$(/opt/homebrew/bin/brew --prefix kube-ps1)/share
  [[ -d $kube_ps1_dir ]] && [[ -f $kube_ps1_dir/kube-ps1.sh ]] && source $kube_ps1_dir/kube-ps1.sh && PROMPT='$(kube_ps1)'$PROMPT
}

source_my_zshrc() {
  [[ -f ~/my.zsh ]] && source ~/my.zsh
}

post_hacks() {
  # issue with oh-my-zsh where diff doesn't do completion if aliased
  if alias diff >/dev/null 2>&1; then 
    unalias diff
    do_something
  fi
}

function diff() {
  # diff_path is set in zshenv
  $diff_path --color $*
}

misc_alias() {
  alias urldecode='python -c "import sys, urllib as ul; \
    print ul.unquote_plus(sys.argv[1])"'
  alias urlencode='python -c "import sys, urllib as ul; \
    print ul.quote_plus(sys.argv[1])"'
  alias golistdeps="go list -deps -f '{{define \"mod\"}}{{.Path}}@{{.Version}}{{end}}{{if .Module}}{{if not .Module.Main}}{{if .Module.Replace}}{{template \"mod\" .Module.Replace}}{{else}}{{template \"mod\" .Module}}{{end}}{{\"\t\"}}{{.ImportPath}}{{end}}{{end}}' | sort"
}


main

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
