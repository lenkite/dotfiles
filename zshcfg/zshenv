# vim: set sw=2 ts=2 sts=2 et tw=80 foldmarker={,} foldlevel=0 foldmethod=marker spell:
# See ZSH startup files: http://zsh.sourceforge.net/Intro/intro_3.html
# Link this to ~/.zshenv
# .zshenv is sourced on all invocations.
# All env variables including path should be set here.
# Should not produce output or aassume that shell is attached to tty.

[ -d ~/dotfiles ] && export dotfiles=~/dotfiles || echo "Could not locate dotfiles at ~/dotfiles"

main() {
  export ZSH_DISABLE_COMPFIX=true
  detect_os
  detect_user
  detect_util
  load_dotenv
  load_dotpaths
  defenv_gcc_clang
  defenv_golang
  defenv_android
  defenv_flutter
  defenv_git
  defenv_kotlin
  defenv_neosdk
  defenv_python
  defenv_java
  defenv_maven
  defenv_zeal
  defenv_nvr
  #defenv_ctags
  manpath=( $dotfiles/man /usr/local/share/man /usr/share/man )
}

detect_os() {
  uname=`uname`
  if [[ $uname == 'Darwin' ]]; then
    export isMacos=true
  elif [[ $uname == 'Linux' ]]; then
    export isLinux=true
  elif [[ $uname == CYGWIN* ]]; then
    export isCygwin=true
  else
    echo "This Setup Script only works for Windows Cygwin, Windows Subsystem for Linux and MacOS"
    exit -1
  fi
  export osreleaseFile=/proc/sys/kernel/osrelease
  if [[ -f  $osreleaseFile ]]; then
    osrelease=`cat $osreleaseFile`
    if [[ $osrelease == *Microsoft* ]]; then
      export isWsl=true
    fi
  fi
}

get_windows_user() {
	local sys32dir="/mnt/c/Windows/System32"
	local winWho=$(cd $sys32dir; whoami.exe)
	local winUser=${winWho##*\\}
}

detect_user() {
  linUser=`whoami`
  if [[ $isCygwin == true ]]; then
    winUser=$linUser
  fi

  if [[ $isWsl == true ]]; then
    winUser=$(get_windows_user)
  fi
}

detect_util() {
  hasCurl=$(command -v curl)
  hasZip=$(command -v zip)
  hasUnzip=$(command -v unzip)
  hasGit=$(command -v git)
  hasNeovim=$(command -v neovim)
  hasPet=$(command -v pet)
  [[ hasCurl ]] || echo "WARN: 'curl' not found. Setup may be incomplete"
  [[ hasZip ]] || echo "WARN: 'zip' not found. Setup may be incomplete"
  [[ hasUnzip ]] || echo "WARN: 'unzip' not found. Setup may be incomplete"
  [[ hasGit ]] || echo "WARN: 'git' not found. Setup may be incomplete"
  [[ hasNeovim ]] || echo "WARN: 'neovim' not found. Kindly install the same"
  [[ hasPet ]] || echo "WARN: 'pet' (https://github.com/knqyf263/pet) not found. Kindly install"
  export done_detect_util=true
}

# Source ~/.env. ~/.env should export user/system
# specific environment variables
load_dotenv() {
  envfile=~/.env
  [[ -f $envfile ]] && source $envfile
}

# Loads lines from ~/.paths and adds each line as 
# path component to env PATH 
load_dotpaths() {
  #ensure that cygwin stuff is first in path, so that windows path doesn't take priority
  export PATH="/bin:/usr/bin:$PATH"
  # http://zsh.sourceforge.net/Guide/zshguide02.html#l24
  typeset -gxU path PATH
  path+=( ~/.local/bin $dotfiles/scripts ~/bin )
  if [[ -d ~/src/fzf/bin ]]; then
    path+=( ~/src/fzf/bin )
  fi
  if [[ -d ~/.fzf/bin ]]; then
    path+=( ~/.fzf/bin )
  fi
  if [[ -d ~/.cargo/bin ]]; then
    path+=( ~/.cargo/bin )
  fi

  # if [[ -d /usr/local/opt/awk/libexec/gnubin ]]; then 
  #   path=( /usr/local/opt/awk/libexec/gnubin path)
  # fi

  pathsf=~/.paths
  if [[ -f $pathsf ]]; then
    #http://stackoverflow.com/questions/12651355/zsh-read-lines-from-file-into-array
    zmodload zsh/mapfile
    FLINES=( "${(f)mapfile[$pathsf]}" )
    LIST="${mapfile[$pathsf]}" # Not required unless stuff uses it
    integer POS=1             # Not required unless stuff uses it
    integer SIZE=$#FLINES     # Number of lines, not required unless stuff uses it
    # setting path list sets PATH in zsh
    path+=( $FLINES )
  fi

  export PATH
}

defenv_gcc_clang() {
  if command -v xcrun >/dev/null 2>&1 ; then
    export SDKROOT="`xcrun --show-sdk-path`"
  fi
}


defenv_golang() {
  if [[ $GOROOT ]]; then
    [[ $isCygwin ]] && { export GOROOT=`cygpath -am $GOROOT` }
  fi
  if [[ $isCygwin ]]; then
    export GOPATH=`cygpath -am ~`
  else
    export GOPATH="$HOME"
  fi
  if [[ -d /usr/local/go/ ]]; then
    typeset -gxU path PATH
    export GOROOT=/usr/local/go
    path+=$GOROOT/bin
    export PATH
  fi

  if [[ $isMacos ]]; then
    brewGoBaseDir=/usr/local/Cellar/go
    goDirName=$(ls -t1 $brewGoBaseDir | head -n1)
    if [[ -d  $brewGoBaseDir/$goDirName ]]; then
      typeset -gxU path PATH
      export GOROOT=$brewGoBaseDir/$goDirName/libexec
      path+=$GOROOT/bin
      export PATH
    fi
  fi
}

defenv_android() {
  if [[ -d /usr/local/share/android-sdk ]]; then
    export ANDROID_SDK_ROOT=/usr/local/share/android-sdk
    export ANDROID_HOME=$ANDROID_SDK_ROOT
  fi
}

defenv_flutter() {
  typeset -gxU path PATH
  if [[ -d $HOME/src/flutter/bin ]]; then
    path+=$HOME/src/flutter/bin
  fi
  if [[ -d $HOME/src/flutter/flutter/bin ]]; then
    path+=$HOME/src/flutter/flutter/bin
  fi
  export PATH
}

defenv_git() {
  if command -v nvim  >/dev/null 2>&1 ; then
    export VISUAL=nvim
  else
    export VISUAL=vim
  fi
  export EDITOR=$VISUAL
  export GIT_EDITOR=$VISUAL
}

defenv_kotlin() {
  local konanbin=$HOME/src/kotlin-native/dist/bin
  if [[ -d $konanbin ]]; then
    export PATH=$PATH:$konanbin
  fi
}

defenv_neosdk() {
  typeset -gxU path PATH
  local neoweb=$HOME/sdk/neoweb
  local neoee=$HOME/sdk/neoee
  if [[ -d $neoweb ]]; then
    path+=$neoweb/tools
  fi
  if [[ -d $neoee ]]; then
    path+=$neoee/tools
  fi
}

defenv_java() {
  jvmHome=/usr/lib/jvm/java-8-oracle/
  if [[ $isLinux && -d $jvmHome ]]; then
    export JAVA_HOME=$jvmHome
  elif [[ $isMacos && -f /usr/libexec/java_home ]]; then
    export JAVA_HOME=$(/usr/libexec/java_home)
  fi
}

defenv_python() {
  typeset -gxU path PATH
  if [[ $isMacos ]]; then
    if [[ -d ~/Library/Python ]]; then
      local pybin=$(echo ~/Library/Python/3.*/bin | awk '{print $NF}')
      [ -d $pybin ] && path+="$pybin" && export PATH
    fi
  fi
  # http://virtualenvwrapper.readthedocs.io/en/latest/_sources/install.txt
  if [[ -f /usr/bin/python3 ]]; then
    export WORKON_HOME=$HOME/.virtualenvs
    export VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3
  fi
  #TODO: configure python environment for linux/wsl too!
}

defenv_nvr() {
  export NVIM_LISTEN_ADDRESS=/tmp/nvimsocket
  if [[ $isMacos ]]; then
  fi
}

defenv_maven() {
  local mvnHome=/opt/maven
  if [[ $isLinux && -d $mvnHome/bin ]]; then
    typeset -gxU path PATH
    path+=$mvnHome/bin
    export M2_HOME=$mvnHome
  fi
}

defenv_zeal() {
  if [[ -d "/mnt/c/Program Files/Zeal" ]]; then
    typeset -gxU path PATH
    path+=/mnt/c/Program\ Files/Zeal
  fi
}

export PATH
main

# See https://github.com/rupa/z/pull/200
[[ $isWsl ]] && { unsetopt BG_NICE }

